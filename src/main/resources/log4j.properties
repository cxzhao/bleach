#根logger主要定义log4j支持的日志级别及输出目的地
#日志级别：OFF(关闭所有日志)、FATAL(错误事件将会导致应用程序的退出)、ERROR、WARN、INFO、DEBUG、ALL，大于等于的日志级别，才会被输出，生产上建议定义为
#INFO,定义为INFO之后可以方便自定义记录一些接口的调用信息和输出信息
#输出目的地：console,daylog 目的地名称自定义
log4j.rootLogger=info,daylog

#将日志输出到控制台
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.out
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}-[ %t:%r ]-[ %p ] %m%n

#  %m   输出代码中指定的消息
#　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#　%r   输出自应用启动到输出该log信息耗费的毫秒数 
#　%c   输出所属的类目，通常就是所在类的全名 
#　%t   输出产生该日志事件的线程名 
#　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss}
#　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#每天生成一个日志文件
log4j.appender.daylog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.daylog.File=/usr/local/testlog/daylog.log
#日志滚动周期'.'yyyy-MM: 每月'.'yyyy-ww: 每周 '.'yyyy-MM-dd: 每天'.'yyyy-MM-dd-a: 每天两次'.'yyyy-MM-dd-HH: 每小时'.'yyyy-MM-dd-HH-mm: 每分钟
log4j.appender.daylog.DatePattern='.'yyyy-MM-dd
log4j.appender.daylog.Append = true
#记录什么级别以上的日志
log4j.appender.daylog.Threshold=INFO
#日志的展示形式
log4j.appender.daylog.layout=org.apache.log4j.PatternLayout
log4j.appender.daylog.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] [ %p ] %m%n

log4j.logger.com.ibatis=debug
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug
log4j.logger.java.sql.Connection=debug
log4j.logger.java.sql.Statement=debug
log4j.logger.java.sql.PreparedStatement=debug,stdout